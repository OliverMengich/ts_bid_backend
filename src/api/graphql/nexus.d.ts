/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Bid: { // root type
    bidder: string; // ID!
    categories: string; // String!
    createdAt: number; // Int!
    id: string; // ID!
    imageUrl: string; // String!
    product: NexusGenRootTypes['Product']; // Product!
    updatedAt: string; // String!
    user: string; // String!
  }
  Mutation: {};
  Product: { // root type
    categories: string; // String!
    id: string; // ID!
    imageUrl: string; // String!
    price: number; // Float!
    title: string; // String!
  }
  Query: {};
  Subscription: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Bid: { // field return type
    bidder: string; // ID!
    categories: string; // String!
    createdAt: number; // Int!
    id: string; // ID!
    imageUrl: string; // String!
    product: NexusGenRootTypes['Product']; // Product!
    updatedAt: string; // String!
    user: string; // String!
  }
  Mutation: { // field return type
    deleteABid: NexusGenRootTypes['Bid']; // Bid!
    placeABid: NexusGenRootTypes['Bid']; // Bid!
    updateABid: NexusGenRootTypes['Bid']; // Bid!
  }
  Product: { // field return type
    categories: string; // String!
    id: string; // ID!
    imageUrl: string; // String!
    price: number; // Float!
    title: string; // String!
  }
  Query: { // field return type
    bid: NexusGenRootTypes['Bid']; // Bid!
    bids: Array<NexusGenRootTypes['Bid'] | null> | null; // [Bid]
  }
  Subscription: { // field return type
    deleteBid: NexusGenRootTypes['Bid'] | null; // Bid
    placeABid: NexusGenRootTypes['Bid'] | null; // Bid
    updateBid: NexusGenRootTypes['Bid'] | null; // Bid
  }
}

export interface NexusGenFieldTypeNames {
  Bid: { // field return type name
    bidder: 'ID'
    categories: 'String'
    createdAt: 'Int'
    id: 'ID'
    imageUrl: 'String'
    product: 'Product'
    updatedAt: 'String'
    user: 'String'
  }
  Mutation: { // field return type name
    deleteABid: 'Bid'
    placeABid: 'Bid'
    updateABid: 'Bid'
  }
  Product: { // field return type name
    categories: 'String'
    id: 'ID'
    imageUrl: 'String'
    price: 'Float'
    title: 'String'
  }
  Query: { // field return type name
    bid: 'Bid'
    bids: 'Bid'
  }
  Subscription: { // field return type name
    deleteBid: 'Bid'
    placeABid: 'Bid'
    updateBid: 'Bid'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteABid: { // args
      bidId: string; // ID!
      bidder: string; // ID!
    }
    placeABid: { // args
      auctionId: string; // ID!
      bidder: string; // ID!
      price: number; // Float!
    }
    updateABid: { // args
      bidId: string; // ID!
      bidder: string; // ID!
      price: number; // Float!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}